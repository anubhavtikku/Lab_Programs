__kernel void matrix(__global int *A, __global int *B) {
	int r = get_global_id(0);
	int rows = get_global_size(0);
	int cols = get_global_size(1);
	int c = get_global_id(1);
	int i;
	int idx = r*cols+c;
	B[idx] = 0;
	for(i=0;i<cols;i++)
		B[idx] += A[r*cols+i];
	for(i=0;i<rows;i++)
		B[idx] += A[i*cols+c];
}


/*
 * prog.c
 *
 *  Created on: 7-Feb-2019
 *      Author: 160905318
 */
#include <stdio.h>
#include <CL/cl.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SOURCE_SIZE 0x100000

int main(int argc, char* argv[]) {
	int i,M,N,j;
	printf("Enter dimensions of matrix : ");
	scanf("%d",&M);
	scanf("%d",&N);
	int size = M*N*sizeof(int);
	int *a = malloc(size);
	int *b = malloc(size);
	printf("Enter matrix elements : ");
	for(i=0;i<M*N;i++)
		scanf("%d",&a[i]);
	FILE *fp = fopen("kernel.cl","r");
	if(!fp) {
		fprintf(stderr,"Failed to load kernel");
		exit(1);
	}
	char *source_str = malloc(sizeof(char)*MAX_SOURCE_SIZE);
	size_t source_size = fread(source_str,1,MAX_SOURCE_SIZE,fp);
	fclose(fp);

	cl_platform_id platform_id = NULL;
	cl_device_id device_id = NULL;
	cl_uint ret_num_devices,ret_num_platforms;

	cl_int ret = clGetPlatformIDs(1,&platform_id,&ret_num_platforms);
	ret = clGetDeviceIDs(platform_id,CL_DEVICE_TYPE_CPU,1,&device_id,&ret_num_devices);

	cl_context context = clCreateContext(NULL,1,&device_id,NULL,NULL,&ret);
	cl_command_queue command_queue = clCreateCommandQueue(context,device_id,NULL,&ret);

	cl_mem a_mem_obj = clCreateBuffer(context,CL_MEM_READ_ONLY,size,NULL,&ret);
	cl_mem b_mem_obj = clCreateBuffer(context,CL_MEM_WRITE_ONLY,size,NULL,&ret);

	ret = clEnqueueWriteBuffer(command_queue,a_mem_obj,CL_TRUE,0,size,a,0,NULL,NULL);

	cl_program program = clCreateProgramWithSource(context,1,(const char**)&source_str,(const size_t*)&source_size,&ret);

	ret = clBuildProgram(program,1,&device_id,NULL,NULL,NULL);
	cl_kernel kernel = clCreateKernel(program,"matrix",&ret);
	ret = clSetKernelArg(kernel,0,sizeof(cl_mem),(void*)&a_mem_obj);
	ret = clSetKernelArg(kernel,1,sizeof(cl_mem),(void*)&b_mem_obj);

	size_t global_item_size[2] = {M,N};
	size_t local_item_size[2] = {1,1};
	ret = clEnqueueNDRangeKernel(command_queue,kernel,2,NULL,global_item_size,local_item_size,0,NULL,NULL);
	ret = clEnqueueReadBuffer(command_queue,b_mem_obj,CL_TRUE,0,size,b,0,NULL,NULL);
	ret = clFinish(command_queue);
	for(i=0;i<M;i++) {
		for(j=0;j<N;j++) {
			printf("%d ",b[i*N+j]);
		}
		printf("\n");
	}

	ret = clFlush(command_queue);
	ret = clReleaseKernel(kernel);
	ret = clReleaseProgram(program);
	ret = clReleaseMemObject(a_mem_obj);
	ret = clReleaseCommandQueue(command_queue);
	ret = clReleaseContext(context);

	free(a);
	return 0;
}

